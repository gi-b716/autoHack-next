name: Release

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build-python:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build

    - name: Build package
      run: python -m build

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "name=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Upload Python artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-dist
        path: dist/

  build-executables:
    needs: build-python
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install UPX (Linux)
      if: matrix.platform == 'linux'
      uses: crazy-max/ghaction-upx@v3
      with:
        install-only: true

    - name: Install UPX (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip" -OutFile "upx.zip"
        Expand-Archive -Path "upx.zip" -DestinationPath "."
        $upxPath = (Get-ChildItem -Path "." -Name "upx-*" -Directory | Select-Object -First 1)
        $env:PATH = "$PWD\$upxPath;$env:PATH"
        echo "$PWD\$upxPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[build]

    - name: Build executable (Linux)
      if: matrix.platform == 'linux'
      run: |
        python -m nuitka --standalone --onefile --follow-imports --remove-output --enable-plugins=upx --lto=yes --warn-implicit-exceptions --warn-unusual-code --file-version=${{ needs.build-python.outputs.tag }} --assume-yes-for-downloads src/autohack/__main__.py
        mv __main__.bin autohack

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        python -m nuitka --standalone --onefile --follow-imports --remove-output --enable-plugins=upx --lto=yes --warn-implicit-exceptions --warn-unusual-code --file-version=${{ needs.build-python.outputs.tag }} --assume-yes-for-downloads src/autohack/__main__.py
        mv __main__.exe autohack.exe

    - name: Create release package (Linux)
      if: matrix.platform == 'linux'
      run: |
        mkdir release-package
        cp README.md release-package/
        cp autohack release-package/
        cd release-package
        zip -r ../autohack-${{ matrix.platform }}-${{ needs.build-python.outputs.tag }}.zip .

    - name: Create release package (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        mkdir release-package
        cp README.md release-package/
        cp autohack.exe release-package/autohack.exe
        cd release-package
        Compress-Archive -Path * -DestinationPath ../autohack-${{ matrix.platform }}-${{ needs.build-python.outputs.tag }}.zip
    
    - name: Upload executable artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.platform }}
        path: autohack-${{ matrix.platform }}-${{ needs.build-python.outputs.tag }}.zip

  release:
    needs: [build-python, build-executables]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download Python artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-dist
        path: dist/

    - name: Download executable artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: executable-*
        merge-multiple: true

    - name: Get commit hash
      id: commit
      run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build-python.outputs.tag }}
        release_name: ${{ needs.build-python.outputs.tag }}
        body: ${{ steps.commit.outputs.hash }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        # Upload Python packages
        for file in dist/*; do
          gh release upload ${{ needs.build-python.outputs.tag }} "$file"
        done
        # Upload executable packages
        for file in autohack-*-*.zip; do
          gh release upload ${{ needs.build-python.outputs.tag }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m pip install twine
        twine upload dist/*
